"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const sd_v13 = require("sd-v13.js");
const GatewayOpCodes_1 = require("./client/GatewayOpCodes");
const index_1 = require("./client/index");
sd_v13.Client.prototype.voiceConnection = undefined;
sd_v13.Client.prototype.patchVoiceEvents = function () {
    this.on('raw', (packet) => {
        this.handleGatewayEvent(packet.t, packet.d);
    });
};
sd_v13.Client.prototype.handleGatewayEvent = function (event, data) {
    var _a, _b, _c, _d, _e;
    if (event === "VOICE_STATE_UPDATE") {
        if (data.user_id === this.user.id) {
            // transfer session data to voice connection
            (_a = this.voiceConnection) === null || _a === void 0 ? void 0 : _a.setSession(data.session_id);
        }
    }
    else if (event === "VOICE_SERVER_UPDATE") {
        // transfer voice server update to voice connection
        if (data.guild_id != ((_b = this.voiceConnection) === null || _b === void 0 ? void 0 : _b.guildId))
            return;
        (_c = this.voiceConnection) === null || _c === void 0 ? void 0 : _c.setTokens(data.endpoint, data.token);
    }
    else if (event === "STREAM_CREATE") {
        const [type, guildId, channelId, userId] = data.stream_key.split(":");
        if (((_d = this.voiceConnection) === null || _d === void 0 ? void 0 : _d.guildId) != guildId)
            return;
        if (userId === this.user.id) {
            this.voiceConnection.screenShareConn.serverId =
                data.rtc_server_id;
            this.voiceConnection.screenShareConn.streamKey =
                data.stream_key;
            this.voiceConnection.screenShareConn.setSession(this.voiceConnection.session_id);
        }
    }
    else if (event === "STREAM_SERVER_UPDATE") {
        const [type, guildId, channelId, userId] = data.stream_key.split(":");
        if (((_e = this.voiceConnection) === null || _e === void 0 ? void 0 : _e.guildId) != guildId)
            return;
        if (userId === this.user.id) {
            this.voiceConnection.screenShareConn.setTokens(data.endpoint, data.token);
        }
    }
};
sd_v13.Client.prototype.sendOpcode = function (code, data) {
    // @ts-ignore
    this.ws.broadcast({
        op: code,
        d: data,
    });
};
/*
 ** Join a voice channel
 ** guild_id -> guild id
 ** channel_id -> channel id
 */
sd_v13.Client.prototype.joinVoice = function (guild_id, channel_id) {
    return new Promise((resolve, reject) => {
        this.voiceConnection = new index_1.VoiceConnection(guild_id, this.user.id, channel_id, (voiceUdp) => {
            resolve(voiceUdp);
        });
        this.signalVideo(guild_id, channel_id, false);
    });
};
sd_v13.Client.prototype.createStream = function () {
    return new Promise((resolve, reject) => {
        if (!this.voiceConnection)
            reject("cannot start stream without first joining voice channel");
        this.signalStream(this.voiceConnection.guildId, this.voiceConnection.channelId);
        this.voiceConnection.screenShareConn = new index_1.StreamConnection(this.voiceConnection.guildId, this.user.id, this.voiceConnection.channelId, (voiceUdp) => {
            resolve(voiceUdp);
        });
    });
};
sd_v13.Client.prototype.leaveVoice = function () {
    var _a, _b, _c;
    (_a = this.voiceConnection) === null || _a === void 0 ? void 0 : _a.stop();
    (_c = (_b = this.voiceConnection) === null || _b === void 0 ? void 0 : _b.screenShareConn) === null || _c === void 0 ? void 0 : _c.stop();
    this.signalLeaveVoice();
    this.voiceConnection = undefined;
};
sd_v13.Client.prototype.signalVideo = function (guild_id, channel_id, video_enabled) {
    this.sendOpcode(GatewayOpCodes_1.GatewayOpCodes.voice_state_update, {
        guild_id,
        channel_id,
        self_mute: false,
        self_deaf: false,
        self_video: video_enabled,
    });
};
sd_v13.Client.prototype.signalStream = function (guild_id, channel_id) {
    this.sendOpcode(GatewayOpCodes_1.GatewayOpCodes.stream_create, {
        type: "guild",
        guild_id,
        channel_id,
        preferred_region: null,
    });
    this.sendOpcode(GatewayOpCodes_1.GatewayOpCodes.stream_set_paused, {
        stream_key: `guild:${guild_id}:${channel_id}:${this.user.id}`,
        paused: false,
    });
};
sd_v13.Client.prototype.signalLeaveVoice = function () {
    this.sendOpcode(GatewayOpCodes_1.GatewayOpCodes.voice_state_update, {
        guild_id: null,
        channel_id: null,
        self_mute: true,
        self_deaf: false,
        self_video: false,
    });
};
__exportStar(require("./client/index"), exports);
__exportStar(require("./media/index"), exports);
