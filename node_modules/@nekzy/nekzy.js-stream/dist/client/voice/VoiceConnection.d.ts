import WebSocket from 'ws';
import { VoiceUdp } from "./VoiceUdp";
import { StreamConnection } from '../stream/StreamConnection';
type VoiceConnectionStatus = {
    hasSession: boolean;
    hasToken: boolean;
    started: boolean;
    resuming: boolean;
};
export declare class VoiceConnection {
    private interval;
    udp: VoiceUdp;
    guildId: string;
    channelId: string;
    botId: string;
    ws: WebSocket;
    ready: (udp: VoiceUdp) => void;
    status: VoiceConnectionStatus;
    server: string;
    token: string;
    session_id: string;
    self_ip: string;
    self_port: number;
    address: string;
    port: number;
    ssrc: number;
    videoSsrc: number;
    rtxSsrc: number;
    modes: string[];
    secretkey: Uint8Array;
    screenShareConn: StreamConnection;
    constructor(guildId: string, botId: string, channelId: string, callback: (udp: VoiceUdp) => void);
    get serverId(): string;
    stop(): void;
    setSession(session_id: string): void;
    setTokens(server: string, token: string): void;
    start(): void;
    handleReady(d: any): void;
    handleSession(d: any): void;
    setupEvents(): void;
    setupHeartbeat(interval: number): void;
    sendOpcode(code: number, data: any): void;
    identify(): void;
    resume(): void;
    setProtocols(): void;
    setVideoStatus(bool: boolean): void;
    setSpeaking(speaking: boolean): void;
    sendVoice(): Promise<void>;
}
export {};
