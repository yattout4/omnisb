"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamLivestreamVideo = exports.command = void 0;
const fluent_ffmpeg_1 = __importDefault(require("fluent-ffmpeg"));
const ivfreader_1 = require("./ivfreader");
const prism_media_1 = __importDefault(require("prism-media"));
const videoStream_1 = require("./videoStream");
const audioStream_1 = require("./audioStream");
const fluent_ffmpeg_multistream_ts_1 = require("@nekzy/fluent-ffmpeg-multistream-ts");
const StreamOpts_1 = require("../client/StreamOpts");
exports.command = undefined;
function streamLivestreamVideo(url, voiceUdp) {
    return new Promise((resolve, reject) => {
        const videoStream = new videoStream_1.VideoStream(voiceUdp);
        const ivfStream = new ivfreader_1.IvfTransformer();
        const audioStream = new audioStream_1.AudioStream(voiceUdp);
        // make opus stream
        const opus = new prism_media_1.default.opus.Encoder({ channels: 2, rate: 48000, frameSize: 960 });
        // get header frame time
        ivfStream.on("header", (header) => {
            videoStream.setSleepTime((0, ivfreader_1.getFrameDelayInMilliseconds)(header));
        });
        audioStream.on("finish", () => {
            resolve("finished audio");
        });
        videoStream.on("finish", () => {
            resolve("finished video");
        });
        const headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.3",
            "Connection": "keep-alive"
        };
        let isHttpUrl = false;
        let isHls = false;
        if (typeof url === "string") {
            isHttpUrl = url.startsWith('http') || url.startsWith('https');
            isHls = url.includes('m3u');
        }
        try {
            exports.command = (0, fluent_ffmpeg_1.default)(url)
                .inputOption('-re')
                .addOption('-loglevel', '0')
                .addOption('-fflags', 'nobuffer')
                .addOption('-analyzeduration', '0')
                .on('end', () => {
                exports.command = undefined;
                resolve("video ended");
            })
                .on("error", (err, stdout, stderr) => {
                exports.command = undefined;
                reject('cannot play video ' + err.message);
            })
                .on('stderr', console.error)
                .output((0, fluent_ffmpeg_multistream_ts_1.StreamOutput)(ivfStream).url, { end: false })
                .noAudio()
                .size(`${StreamOpts_1.streamOpts.width}x${StreamOpts_1.streamOpts.height}`)
                .fpsOutput(StreamOpts_1.streamOpts.fps)
                .videoBitrate(`${StreamOpts_1.streamOpts.bitrateKbps}k`)
                .format('ivf')
                .outputOption('-deadline', 'realtime')
                .output((0, fluent_ffmpeg_multistream_ts_1.StreamOutput)(opus).url, { end: false })
                .noVideo()
                .audioChannels(2)
                .audioFrequency(48000)
                //.audioBitrate('128k')
                .format('s16le');
            if (StreamOpts_1.streamOpts.hardware_encoding)
                exports.command.inputOption('-hwaccel', 'auto');
            if (isHttpUrl) {
                exports.command.inputOption('-headers', Object.keys(headers).map(key => key + ": " + headers[key]).join("\r\n"));
                if (!isHls)
                    exports.command.inputOptions('-reconnect 1 -reconnect_at_eof 1 -reconnect_streamed 1 -reconnect_delay_max 4294'.split(' '));
            }
            exports.command.run();
            ivfStream.pipe(videoStream, { end: false });
            opus.pipe(audioStream, { end: false });
        }
        catch (e) {
            //audioStream.end();
            //videoStream.end();
            exports.command = undefined;
            reject("cannot play video " + e.message);
        }
    });
}
exports.streamLivestreamVideo = streamLivestreamVideo;
